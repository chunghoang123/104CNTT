class Book2 {
    private id: number;
    private title: string;
    private author: string;
    private year: number;

    constructor(id: number, title: string, author: string, year: number) {
        this.id = id;
        this.title = title;
        this.author = author;
        this.year = year;
    }

    public getId(): number {
        return this.id;
    }

    public getTitle(): string {
        return this.title;
    }

    public getAuthor(): string {
        return this.author;
    }

    public getYear(): number {
        return this.year;
    }

    public setTitle(title: string): void {
        this.title = title;
    }

    public setAuthor(author: string): void {
        this.author = author;
    }

    public setYear(year: number): void {
        this.year = year;
    }
}

class Library2 {
    private books: Book2[] = [];

    public addBook(book: Book2): void {
        this.books.push(book);
    }

    public viewBooks(): void {
        console.log("üìö Danh s√°ch s√°ch trong th∆∞ vi·ªán:");
        if (this.books.length === 0) {
            console.log(" Th∆∞ vi·ªán tr·ªëng.");
            return;
        }
        this.books.forEach((book, index) => {
            console.log(`${index + 1}. [ID: ${book.getId()}] ${book.getTitle()} - ${book.getAuthor()} (${book.getYear()})`);
        });
    }

    public updateBookById(id: number, newTitle: string, newAuthor: string, newYear: number): void {
        const book = this.books.find(b => b.getId() === id);
        if (book) {
            book.setTitle(newTitle);
            book.setAuthor(newAuthor);
            book.setYear(newYear);
            console.log(`S√°ch ID ${id} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.`);
        } else {
            console.log(`Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi ID ${id}.`);
        }
    }

    public deleteBookById(id: number): void {
        const index = this.books.findIndex(b => b.getId() === id);
        if (index !== -1) {
            this.books.splice(index, 1);
            console.log(` S√°ch ID ${id} ƒë√£ b·ªã x√≥a.`);
        } else {
            console.log(`Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi ID ${id}.`);
        }
    }

    public searchBooksByTitle(keyword: string): void {
        const foundBooks = this.books.filter(book =>
            book.getTitle().toLowerCase().includes(keyword.toLowerCase())
        );
        if (foundBooks.length > 0) {
            console.log(`üîç K·∫øt qu·∫£ t√¨m ki·∫øm cho "${keyword}":`);
            foundBooks.forEach(book => {
                console.log(`[ID: ${book.getId()}] ${book.getTitle()} - ${book.getAuthor()} (${book.getYear()})`);
            });
        } else {
            console.log(` Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi t·ª´ kh√≥a "${keyword}".`);
        }
    }
}

const book7 = new Book2(1, "L·∫≠p Tr√¨nh JavaScript", "Nguy·ªÖn VƒÉn A", 2020);
const book8 = new Book2(2, "H·ªçc TypeScript", "Tr·∫ßn VƒÉn B", 2021);

const library2 = new Library2();
library2.addBook(book7);
library2.addBook(book8);

library2.viewBooks();

console.log("\n C·∫≠p nh·∫≠t s√°ch ID 2:");
library2.updateBookById(2, "TypeScript N√¢ng Cao", "Tr·∫ßn VƒÉn B Updated", 2024);
library2.viewBooks();

console.log("\n X√≥a s√°ch ID 1:");
library2.deleteBookById(1);
library2.viewBooks();

console.log("\n T√¨m ki·∫øm s√°ch c√≥ ch·ªØ 'L·∫≠p':");
library2.searchBooksByTitle("L·∫≠p");
